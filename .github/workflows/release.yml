name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  affected:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: '~/.npm'
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm ci --no-audit
      - name: Get affected
        id: affected
        run: |
          echo "DOCKER=$(npx nx print-affected --target=docker --select=tasks.target.project | sed 's/ //g' | sed 's|$|"|' | sed -e 's/^/"/' | jq -c 'split(",")')" >> $GITHUB_OUTPUT
          echo "NPM=$(npx nx print-affected --target=npm --select=tasks.target.project | sed 's/ //g' | sed 's|$|"|' | sed -e 's/^/"/' | jq -c 'split(",")')" >> $GITHUB_OUTPUT
    outputs:
      docker: ${{ steps.affected.outputs.DOCKER }}
      npm: ${{ steps.affected.outputs.NPM }}
  release:
    runs-on: ubuntu-latest
    needs: [affected]
    if: ${{ fromJson(needs.affected.outputs.docker)[0] || fromJson(needs.affected.outputs.npm)[0] }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: '~/.npm'
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm ci --no-audit
      - name: Release
        uses: cycjimmy/semantic-release-action@v3
        id: semantic
        with:
          semantic_version: 19
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
      new_release_channel: ${{ steps.semantic.outputs.new_release_channel || 'latest' }}
  publish_to_docker:
    runs-on: ubuntu-latest
    needs: [affected, release]
    if: needs.release.outputs.new_release_published == 'true'
    strategy:
      fail-fast: false
      matrix:
        projectName: ${{fromJson(needs.affected.outputs.docker)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ matrix.projectName }}
          tags: |
            type=semver,pattern={{version}},value=v${{ needs.release.outputs.new_release_version }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: '~/.npm'
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm ci --no-audit
      - name: Build and push
        run: npx nx run ${{ matrix.projectName }}:docker
        env:
          INPUT_TAGS: ${{ steps.meta.outputs.tags }}
          INPUT_LABELS: ${{ steps.meta.outputs.labels }}
  publish_to_npm:
    runs-on: ubuntu-latest
    needs: [affected, release]
    if: needs.release.outputs.new_release_published == 'true'
    strategy:
      fail-fast: false
      matrix:
        projectName: ${{fromJson(needs.affected.outputs.npm)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          registry-url: 'https://npm.pkg.github.com'
      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: '~/.npm'
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm ci --no-audit
      - name: Build and publish
        run: npx nx run ${{ matrix.projectName }}:npm --args="--version=${{ needs.release.outputs.new_release_version }} --tag=${{ needs.release.outputs.new_release_channel }}"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Delete old versions
        uses: actions/delete-package-versions@v4
        with:
          package-name: ${{ matrix.projectName }}
          package-type: 'npm'
          min-versions-to-keep: 10
          delete-only-pre-release-versions: 'true'
