name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write

jobs:
  affected:
    uses: ./.github/workflows/affected.yml
  release:
    runs-on: ubuntu-latest
    needs: [affected]
    if: needs.affected.outputs.docker != '[]' || needs.affected.outputs.npm != '[]'
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Setup Node
        uses: ./.github/actions/setup-node
      - name: Release
        uses: cycjimmy/semantic-release-action@v5
        id: semantic
        with:
          semantic_version: 24
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
      new_release_channel: ${{ steps.semantic.outputs.new_release_channel || 'latest' }}
      new_release_major_version: ${{ steps.semantic.outputs.new_release_major_version }}
      new_release_minor_version: ${{ steps.semantic.outputs.new_release_minor_version }}
      new_release_patch_version: ${{ steps.semantic.outputs.new_release_patch_version }}
  publish_to_docker:
    runs-on: ubuntu-latest
    needs: [affected, release]
    if: needs.release.outputs.new_release_published == 'true' && needs.affected.outputs.docker != '[]'
    strategy:
      fail-fast: false
      matrix:
        projectName: ${{fromJson(needs.affected.outputs.docker)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ matrix.projectName }}
          flavor: |
            latest=false
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}},enable=true,value=v${{ needs.release.outputs.new_release_version }}
            type=semver,pattern={{major}},enable={{is_default_branch}},value=v${{ needs.release.outputs.new_release_version }}
            type=semver,pattern={{major}}.{{minor}},enable={{is_default_branch}},value=v${{ needs.release.outputs.new_release_version }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Node
        uses: ./.github/actions/setup-node
      - name: Build and push
        run: node ./scripts/nx.js run ${{ matrix.projectName }}:docker
        env:
          INPUT_TAGS: ${{ steps.meta.outputs.tags }}
          INPUT_LABELS: ${{ steps.meta.outputs.labels }}
          INPUT_BUILD_ARGS: |
            VERSION=${{ needs.release.outputs.new_release_version }}
            SOURCE_DIR=dist/apps/${{ matrix.projectName }}
  publish_to_npm:
    runs-on: ubuntu-latest
    needs: [affected, release]
    if: needs.release.outputs.new_release_published == 'true' && needs.affected.outputs.npm != '[]'
    strategy:
      fail-fast: false
      matrix:
        projectName: ${{fromJson(needs.affected.outputs.npm)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Setup Node
        uses: ./.github/actions/setup-node
      - name: Build and publish
        run: pnpm exec nx run ${{ matrix.projectName }}:npm --access=public --release-version=${{ needs.release.outputs.new_release_version }} --release-tag=${{ needs.release.outputs.new_release_channel }}
