name: CI

on:
  pull_request:
    types:
      - opened
      - synchronize
  merge_group:

jobs:
  affected:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get base branch name
        id: base
        run: |
          if [[ "${{ github.event_name }}" == "merge_group" ]]; then
            echo "BRANCH=$(echo ${{ github.event.merge_group.base_ref }} | cut -b 12-)" >> $GITHUB_OUTPUT
          else
            echo "BRANCH=${{ github.base_ref }}" >> $GITHUB_OUTPUT
          fi
      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v4
        with:
          # Affected projects are found based on the base branch
          main-branch-name: ${{ steps.base.outputs.BRANCH }}
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
      - uses: pnpm/action-setup@v3
        name: Install pnpm
        with:
          version: 8
          run_install: false
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install
      - name: Get affected
        id: affected
        run: |
          echo "UNIT_TEST=$(pnpm exec nx show projects --affected --withTarget=test | jq -R 'split("\n") | map(select(. != "")) | .[]' | jq -s -c .)" >> $GITHUB_OUTPUT
          echo "BUILD=$(pnpm exec nx show projects --affected --withTarget=build | jq -R 'split("\n") | map(select(. != "")) | .[]' | jq -s -c .)" >> $GITHUB_OUTPUT
    outputs:
      unit-test: ${{ steps.affected.outputs.UNIT_TEST }}
      build: ${{ steps.affected.outputs.BUILD }}
  unit-test:
    runs-on: ubuntu-latest
    needs: [affected]
    if: ${{ fromJson(needs.affected.outputs.unit-test)[0] }}
    strategy:
      matrix:
        node: ['18.x']
        projectName: ${{fromJson(needs.affected.outputs.unit-test)}}
    env:
      NODE: ${{ matrix.node }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      - uses: pnpm/action-setup@v3
        name: Install pnpm
        with:
          version: 8
          run_install: false
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install
      - name: Test unit
        run: pnpm exec nx run ${{ matrix.projectName }}:test
  build:
    runs-on: ubuntu-latest
    needs: [affected]
    if: ${{ fromJson(needs.affected.outputs.build)[0] }}
    strategy:
      matrix:
        node: ['18.x']
        projectName: ${{fromJson(needs.affected.outputs.build)}}
    env:
      NODE: ${{ matrix.node }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      - uses: pnpm/action-setup@v3
        name: Install pnpm
        with:
          version: 8
          run_install: false
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install
      - name: Test unit
        run: pnpm exec nx run ${{ matrix.projectName }}:build
  ci-finished:
    runs-on: ubuntu-latest
    needs: [affected, unit-test, build]
    if: |
      always() && needs.affected.result == 'success' &&
      (needs.unit-test.result == 'success' || needs.unit-test.result == 'skipped') &&
      (needs.build.result == 'success' || needs.build.result == 'skipped')
    steps:
      - name: Trace
        run: echo "All jobs finished"
