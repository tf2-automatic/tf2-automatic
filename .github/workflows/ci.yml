name: CI

on:
  pull_request:
    types:
      - opened
      - synchronize
      - edited

jobs:
  affected:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10
          run_install: false
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install
      - name: Get affected
        id: affected
        run: |
          echo "TEST=$(pnpm exec nx show projects --affected --withTarget=build,test | jq -R 'split("\n") | map(select(. != "")) | .[]' | jq -s -c .)" >> $GITHUB_OUTPUT
          echo "E2E=$(pnpm exec nx show projects --affected --withTarget=e2e | jq -R 'split("\n") | map(select(. != "")) | .[]' | jq -s -c .)" >> $GITHUB_OUTPUT
    outputs:
      test: ${{ steps.affected.outputs.TEST }}
      e2e: ${{ steps.affected.outputs.E2E }}
  test:
    runs-on: ubuntu-latest
    needs: [affected]
    if: ${{ fromJson(needs.affected.outputs.test)[0] }}
    strategy:
      matrix:
        node: ['22.x']
        projectName: ${{fromJson(needs.affected.outputs.test)}}
    env:
      NODE: ${{ matrix.node }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10
          run_install: false
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install
      - name: Build
        run: node ./scripts/nx.js run ${{ matrix.projectName }}:build
      - name: Test
        run: node ./scripts/nx.js run ${{ matrix.projectName }}:test
  e2e:
    runs-on: ubuntu-latest
    needs: [affected, test]
    if: ${{ fromJson(needs.affected.outputs.e2e)[0] }}
    strategy:
      matrix:
        node: ['22.x']
        projectName: ${{fromJson(needs.affected.outputs.e2e)}}
    env:
      NODE: ${{ matrix.node }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10
          run_install: false
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install
      - name: End to end test
        run: node ./scripts/nx.js run ${{ matrix.projectName }}:e2e
  ci-finished:
    runs-on: ubuntu-latest
    needs: [affected, test, e2e]
    if: |
      always() && needs.affected.result == 'success' &&
      (needs.test.result == 'success' || needs.test.result == 'skipped') &&
      (needs.e2e.result == 'success' || needs.e2e.result == 'skipped')
    steps:
      - name: Trace
        run: echo "All jobs finished"
